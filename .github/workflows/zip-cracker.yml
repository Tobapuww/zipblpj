name: RawOutputCracker

on:
  workflow_dispatch:
    inputs:
      zip_url:
        description: '需要破解的ZIP文件直链'
        required: true

jobs:
  process:
    runs-on: [self-hosted, high-cpu, linux, X64]
    timeout-minutes: 360

    steps:
    - name: 初始化存储
      run: |
        sudo mkdir -p /mnt/cracker
        sudo chown -R runner:docker /mnt/cracker
        echo "主工作区已创建：$(df -h /mnt)"
        
    # 环境初始化
    - name: 初始化环境
      working-directory: /mnt/cracker
      run: |
        sudo apt update
        sudo apt install -y unrar python3 wget python3-pip
        

    # 获取核心组件
    - name: 部署工具链
      working-directory: /mnt/cracker
      run: |
        git clone https://github.com/asaotomo/ZipCracker.git
        cd ZipCracker
        wget -q https://github.com/Tobapuww/zipblpj/raw/main/dit.rar

    # 字典处理流程
    - name: 准备字典文件
      working-directory: /mnt/cracker/ZipCracker
      run: |
        unrar x -y dit.rar
        cd "28G爆破字典"
        unrar x -y "28GBwordlist.part0001.rar"
        mv "acdc's dictionary.txt" ../
        cd ..
        rm -rf "28G爆破字典" dit.rar

    # 核心执行模块
    - name: 执行破解任务
      working-directory: /mnt/cracker/ZipCracker
      env:
        TERM: xterm
      run: |
        export PYTHONUNBUFFERED=1
        export CI=true
        wget -O target.zip "${{ github.event.inputs.zip_url }}"
        {
          echo "===== 环境验证 ====="
          echo "当前路径: $(pwd)"
          echo "文件列表:"
          ls -lh
          
          echo "===== 开始执行 ====="
          stdbuf -oL python3 ZipCracker.py target.zip "acdc's dictionary.txt" 2>&1 | 
            while IFS= read -r line; do 
              tr '\r' '\n'
              printf "[%s] %s\n" "$(date '+%Y-%m-%d %H:%M:%S')" "$line";
            done
        } | tee -a full_output.log
        sync
        mv full_output.log $GITHUB_WORKSPACE/

    # 结果发布（使用新版Action）
    - name: 上传原始日志
      uses: actions/upload-artifact@v4
      with:
        name: raw_logs
        path: ${{ github.workspace }}/full_output.log
